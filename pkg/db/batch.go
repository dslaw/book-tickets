// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const linkPerformers = `-- name: LinkPerformers :batchexec
insert into event_performers (event_id, performer_id)
select $1, performers.id
from performers
where name = $2
`

type LinkPerformersBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type LinkPerformersParams struct {
	EventID int32
	Name    string
}

func (q *Queries) LinkPerformers(ctx context.Context, arg []LinkPerformersParams) *LinkPerformersBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.EventID,
			a.Name,
		}
		batch.Queue(linkPerformers, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &LinkPerformersBatchResults{br, len(arg), false}
}

func (b *LinkPerformersBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *LinkPerformersBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const writeNewTickets = `-- name: WriteNewTickets :batchone
insert into tickets (event_id, purchaser_id, price, seat)
select events.id, null, $1, $2
from events
where
    events.id = $3
    and events.deleted = false
returning id
`

type WriteNewTicketsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type WriteNewTicketsParams struct {
	Price   int32
	Seat    string
	EventID int32
}

// The inserted record's id is returned so that the generated query will return
// an error (`sql.ErrNoRows`) if no record is inserted due to the where clause
// not finding a matching event.
func (q *Queries) WriteNewTickets(ctx context.Context, arg []WriteNewTicketsParams) *WriteNewTicketsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Price,
			a.Seat,
			a.EventID,
		}
		batch.Queue(writeNewTickets, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &WriteNewTicketsBatchResults{br, len(arg), false}
}

func (b *WriteNewTicketsBatchResults) QueryRow(f func(int, int32, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var id int32
		if b.closed {
			if f != nil {
				f(t, id, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(&id)
		if f != nil {
			f(t, id, err)
		}
	}
}

func (b *WriteNewTicketsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const writePerformers = `-- name: WritePerformers :batchexec
insert into performers (name) values ($1)
on conflict (name) do nothing
`

type WritePerformersBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) WritePerformers(ctx context.Context, name []string) *WritePerformersBatchResults {
	batch := &pgx.Batch{}
	for _, a := range name {
		vals := []interface{}{
			a,
		}
		batch.Queue(writePerformers, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &WritePerformersBatchResults{br, len(name), false}
}

func (b *WritePerformersBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *WritePerformersBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
