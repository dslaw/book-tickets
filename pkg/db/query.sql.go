// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVenue = `-- name: CreateVenue :one
insert into venues (name, description, address, city, subdivision, country_code)
values ($1, $2, $3, $4, $5, $6)
returning id
`

type CreateVenueParams struct {
	Name        string
	Description pgtype.Text
	Address     string
	City        string
	Subdivision string
	CountryCode string
}

func (q *Queries) CreateVenue(ctx context.Context, arg CreateVenueParams) (int32, error) {
	row := q.db.QueryRow(ctx, createVenue,
		arg.Name,
		arg.Description,
		arg.Address,
		arg.City,
		arg.Subdivision,
		arg.CountryCode,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteVenue = `-- name: DeleteVenue :one
with delete_events as (
    -- Cascade delete to events.
    update events
    set deleted = true
    where venue_id = $1
), delete_venues as (
    update venues
    set deleted = true
    where
        id = $1
        and deleted = false
    returning id
)
select count(*) from delete_venues
`

func (q *Queries) DeleteVenue(ctx context.Context, venueID int32) (int64, error) {
	row := q.db.QueryRow(ctx, deleteVenue, venueID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getVenue = `-- name: GetVenue :one
select venues.id, venues.name, venues.description, venues.address, venues.city, venues.subdivision, venues.country_code, venues.deleted
from venues
where
    id = $1
    and deleted = false
`

type GetVenueRow struct {
	Venue Venue
}

func (q *Queries) GetVenue(ctx context.Context, venueID int32) (GetVenueRow, error) {
	row := q.db.QueryRow(ctx, getVenue, venueID)
	var i GetVenueRow
	err := row.Scan(
		&i.Venue.ID,
		&i.Venue.Name,
		&i.Venue.Description,
		&i.Venue.Address,
		&i.Venue.City,
		&i.Venue.Subdivision,
		&i.Venue.CountryCode,
		&i.Venue.Deleted,
	)
	return i, err
}

const updateVenue = `-- name: UpdateVenue :one
update venues
set
    name = $1,
    description = $2,
    address = $3,
    city = $4,
    subdivision = $5,
    country_code = $6
where
    id = $7
    and deleted = false
returning id
`

type UpdateVenueParams struct {
	Name        string
	Description pgtype.Text
	Address     string
	City        string
	Subdivision string
	CountryCode string
	VenueID     int32
}

func (q *Queries) UpdateVenue(ctx context.Context, arg UpdateVenueParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateVenue,
		arg.Name,
		arg.Description,
		arg.Address,
		arg.City,
		arg.Subdivision,
		arg.CountryCode,
		arg.VenueID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
